sine_words <- subset(sine_words, testing_loc != "pilot")
sine_words$clarity <- as.factor(ifelse(sine_words$instruction_number %in% c(1,2),"clear","distorted"))
sine_words$novelty <- as.factor(ifelse(sine_words$distance %in% c("different"),"novel","familiar"))
sine_words$age <- NA
sine_words$lang <- NA
sine_words$choose_unmentioned <- ifelse(sine_words$chosen_pic == sine_words$sound1_item,0,ifelse(sine_words$chosen_pic == sine_words$sound2_item,0,1))
subj_list <- read.csv(subject_list, header =  T)
sine_words <- merge(sine_words,subj_list, by = "subject_id")
}
children <- process_sine_data("./Expt2_Words/CHILDREN/","./Expt2_Words/children_subject_list.csv")
children$Group <- "Children"
adults <- process_sine_data("./Expt2_Words/ADULTS/","./Expt2_Words/adult_subject_list.csv")
adults$Group <- "Adults: 1st Lang"
italians <- process_sine_data("./Expt2_Words/ITALIAN/","./Expt2_Words/italian_subject_list.csv")
italians$Group <- "Adults: 2nd Lang"
expt2 <- rbind(children,adults,italians)
summaryBy(resp ~ speaker_match + clarity + distance,data = children)
summaryBy(resp + choose_unmentioned ~ age_years + distance , data =subset(children, instruction_number == 3))
summary(glmer(resp ~  distance*scale(age_years) +(1+distance|subject_id), data = subset(children, instruction_number == 3 & distance != "different"), family = "binomial"))
setwd("~/Dropbox/Studies/Child_PsyLx/TopDown/Expt2_Words")
library(lme4)
library(tidyverse)
library(lubridate)
library(ggplot2)
library(readr)
library(dplyr)
library(doBy)
## for bootstrapping 95% confidence intervals -- from Mike Frank https://github.com/langcog/KTE/blob/master/mcf.useful.R
library(bootstrap)
theta <- function(x,xdata,na.rm=T) {mean(xdata[x],na.rm=na.rm)}
ci.low <- function(x,na.rm=T) {
quantile(bootstrap(1:length(x),1000,theta,x,na.rm=na.rm)$thetastar,.025,na.rm=na.rm)} #  mean(x,na.rm=na.rm) -
ci.high <- function(x,na.rm=T) {
quantile(bootstrap(1:length(x),1000,theta,x,na.rm=na.rm)$thetastar,.975,na.rm=na.rm) } #- mean(x,na.rm=na.rm)}
read_TD_data <- function(csv,type){
word <- bind_rows(lapply(csv, read.csv, colClasses = c("num_siblings"="character","birth_order" = "character","subject_id" = "character")))
word$DOT <- parse_date_time(word$date_stamp, "%m/%d/%Y")
word$DOB <- parse_date_time(word$date_of_birth,c("%Y-%m-%d","%d/%m.%y"))
#word$age_weeks <- difftime(word$DOT,word$DOB,units = "weeks")
#word$age <- as.numeric(floor(word$age_weeks/26)/2)
#word <- subset(word, age > 1 & age <= 9)
#word$age <- ordered(word$age)
word$Experiment = type
word$trial_type <- as.factor(word$trial_type)
#word <- subset(word, trial_type == "critical" )
word$resp <- ifelse(word$accuracy == "true",1,0)
word$speaker_match <- as.factor(ifelse((word$plain == "fem_plain" & word$sws == "fem_sws")|(word$plain == "mal_plain" & word$sws == "mal_sws"),"Speaker Match","Speaker Mismatch"))
return(word)
}
process_sine_data <- function(path,subject_list){
sine_words_csv <- dir(path = path,pattern='*.csv$', recursive = T,full.names = T)
sine_words <- read_TD_data(sine_words_csv,"Sine Words")
sine_words$testing_loc <- as.factor(sine_words$testing_loc)
sine_words<- subset(sine_words,trial_type == "critical")
sine_words <- subset(sine_words, testing_loc != "pilot")
sine_words$clarity <- as.factor(ifelse(sine_words$instruction_number %in% c(1,2),"clear","distorted"))
sine_words$novelty <- as.factor(ifelse(sine_words$distance %in% c("different"),"novel","familiar"))
sine_words$age <- NA
sine_words$lang <- NA
sine_words$choose_unmentioned <- ifelse(sine_words$chosen_pic == sine_words$sound1_item,0,ifelse(sine_words$chosen_pic == sine_words$sound2_item,0,1))
subj_list <- read.csv(subject_list, header =  T)
sine_words <- merge(sine_words,subj_list, by = "subject_id")
}
children <- process_sine_data("./Expt2_Words/CHILDREN/","./Expt2_Words/children_subject_list.csv")
children$Group <- "Children"
adults <- process_sine_data("./Expt2_Words/ADULTS/","./Expt2_Words/adult_subject_list.csv")
adults$Group <- "Adults: 1st Lang"
italians <- process_sine_data("./Expt2_Words/ITALIAN/","./Expt2_Words/italian_subject_list.csv")
italians$Group <- "Adults: 2nd Lang"
expt2 <- rbind(children,adults,italians)
summaryBy(resp ~ speaker_match + clarity + distance,data = children)
summaryBy(resp + choose_unmentioned ~ age_years + distance , data =subset(children, instruction_number == 3))
summary(glmer(resp ~  distance*scale(age_years) +(1+distance|subject_id), data = subset(children, instruction_number == 3 & distance != "different"), family = "binomial"))
setwd("~/Dropbox/Studies/Child_PsyLx/TopDown")
library(lme4)
library(tidyverse)
library(lubridate)
library(ggplot2)
library(readr)
library(dplyr)
library(doBy)
## for bootstrapping 95% confidence intervals -- from Mike Frank https://github.com/langcog/KTE/blob/master/mcf.useful.R
library(bootstrap)
theta <- function(x,xdata,na.rm=T) {mean(xdata[x],na.rm=na.rm)}
ci.low <- function(x,na.rm=T) {
quantile(bootstrap(1:length(x),1000,theta,x,na.rm=na.rm)$thetastar,.025,na.rm=na.rm)} #  mean(x,na.rm=na.rm) -
ci.high <- function(x,na.rm=T) {
quantile(bootstrap(1:length(x),1000,theta,x,na.rm=na.rm)$thetastar,.975,na.rm=na.rm) } #- mean(x,na.rm=na.rm)}
read_TD_data <- function(csv,type){
word <- bind_rows(lapply(csv, read.csv, colClasses = c("num_siblings"="character","birth_order" = "character","subject_id" = "character")))
word$DOT <- parse_date_time(word$date_stamp, "%m/%d/%Y")
word$DOB <- parse_date_time(word$date_of_birth,c("%Y-%m-%d","%d/%m.%y"))
#word$age_weeks <- difftime(word$DOT,word$DOB,units = "weeks")
#word$age <- as.numeric(floor(word$age_weeks/26)/2)
#word <- subset(word, age > 1 & age <= 9)
#word$age <- ordered(word$age)
word$Experiment = type
word$trial_type <- as.factor(word$trial_type)
#word <- subset(word, trial_type == "critical" )
word$resp <- ifelse(word$accuracy == "true",1,0)
word$speaker_match <- as.factor(ifelse((word$plain == "fem_plain" & word$sws == "fem_sws")|(word$plain == "mal_plain" & word$sws == "mal_sws"),"Speaker Match","Speaker Mismatch"))
return(word)
}
process_sine_data <- function(path,subject_list){
sine_words_csv <- dir(path = path,pattern='*.csv$', recursive = T,full.names = T)
sine_words <- read_TD_data(sine_words_csv,"Sine Words")
sine_words$testing_loc <- as.factor(sine_words$testing_loc)
sine_words<- subset(sine_words,trial_type == "critical")
sine_words <- subset(sine_words, testing_loc != "pilot")
sine_words$clarity <- as.factor(ifelse(sine_words$instruction_number %in% c(1,2),"clear","distorted"))
sine_words$novelty <- as.factor(ifelse(sine_words$distance %in% c("different"),"novel","familiar"))
sine_words$age <- NA
sine_words$lang <- NA
sine_words$choose_unmentioned <- ifelse(sine_words$chosen_pic == sine_words$sound1_item,0,ifelse(sine_words$chosen_pic == sine_words$sound2_item,0,1))
subj_list <- read.csv(subject_list, header =  T)
sine_words <- merge(sine_words,subj_list, by = "subject_id")
}
children <- process_sine_data("./Expt2_Words/CHILDREN/","./Expt2_Words/children_subject_list.csv")
children$Group <- "Children"
adults <- process_sine_data("./Expt2_Words/ADULTS/","./Expt2_Words/adult_subject_list.csv")
adults$Group <- "Adults: 1st Lang"
italians <- process_sine_data("./Expt2_Words/ITALIAN/","./Expt2_Words/italian_subject_list.csv")
italians$Group <- "Adults: 2nd Lang"
expt2 <- rbind(children,adults,italians)
summaryBy(resp ~ speaker_match + clarity + distance,data = children)
summaryBy(resp + choose_unmentioned ~ age_years + distance , data =subset(children, instruction_number == 3))
summary(glmer(resp ~  distance*scale(age_years) +(1+distance|subject_id), data = subset(children, instruction_number == 3 & distance != "different"), family = "binomial"))
#######
# Exclude trials where they got a clear word wrong
wrong_clear <- summaryBy(resp ~ subject_id + trial_id, data = subset(children, clarity != "distorted"))
wrong_clear <- subset(wrong_clear, acc.mean <1)
wrong_clear$subj_trial <- paste(wrong_clear$subject_id, wrong_clear$trial_id)
children$subj_trial <- paste(children$subject_id,children$trial_id)
children <- children[!children$subj_trial %in% wrong_clear$subj_trial,]
#######
# Exclude trials where they got a clear word wrong
wrong_clear <- summaryBy(resp ~ subject_id + trial_id, data = subset(children, clarity != "distorted"))
wrong_clear <- subset(wrong_clear, resp.mean <1)
wrong_clear$subj_trial <- paste(wrong_clear$subject_id, wrong_clear$trial_id)
children$subj_trial <- paste(children$subject_id,children$trial_id)
children <- children[!children$subj_trial %in% wrong_clear$subj_trial,]
library(lme4)
library(tidyverse)
library(lubridate)
library(ggplot2)
library(readr)
library(dplyr)
library(doBy)
## for bootstrapping 95% confidence intervals -- from Mike Frank https://github.com/langcog/KTE/blob/master/mcf.useful.R
library(bootstrap)
theta <- function(x,xdata,na.rm=T) {mean(xdata[x],na.rm=na.rm)}
ci.low <- function(x,na.rm=T) {
quantile(bootstrap(1:length(x),1000,theta,x,na.rm=na.rm)$thetastar,.025,na.rm=na.rm)} #  mean(x,na.rm=na.rm) -
ci.high <- function(x,na.rm=T) {
quantile(bootstrap(1:length(x),1000,theta,x,na.rm=na.rm)$thetastar,.975,na.rm=na.rm) } #- mean(x,na.rm=na.rm)}
read_TD_data <- function(csv,type){
word <- bind_rows(lapply(csv, read.csv, colClasses = c("num_siblings"="character","birth_order" = "character","subject_id" = "character")))
word$DOT <- parse_date_time(word$date_stamp, "%m/%d/%Y")
word$DOB <- parse_date_time(word$date_of_birth,c("%Y-%m-%d","%d/%m.%y"))
#word$age_weeks <- difftime(word$DOT,word$DOB,units = "weeks")
#word$age <- as.numeric(floor(word$age_weeks/26)/2)
#word <- subset(word, age > 1 & age <= 9)
#word$age <- ordered(word$age)
word$Experiment = type
word$trial_type <- as.factor(word$trial_type)
#word <- subset(word, trial_type == "critical" )
word$resp <- ifelse(word$accuracy == "true",1,0)
word$speaker_match <- as.factor(ifelse((word$plain == "fem_plain" & word$sws == "fem_sws")|(word$plain == "mal_plain" & word$sws == "mal_sws"),"Speaker Match","Speaker Mismatch"))
return(word)
}
process_sine_data <- function(path,subject_list){
sine_words_csv <- dir(path = path,pattern='*.csv$', recursive = T,full.names = T)
sine_words <- read_TD_data(sine_words_csv,"Sine Words")
sine_words$testing_loc <- as.factor(sine_words$testing_loc)
sine_words<- subset(sine_words,trial_type == "critical")
sine_words <- subset(sine_words, testing_loc != "pilot")
sine_words$clarity <- as.factor(ifelse(sine_words$instruction_number %in% c(1,2),"clear","distorted"))
sine_words$novelty <- as.factor(ifelse(sine_words$distance %in% c("different"),"novel","familiar"))
sine_words$age <- NA
sine_words$lang <- NA
sine_words$choose_unmentioned <- ifelse(sine_words$chosen_pic == sine_words$sound1_item,0,ifelse(sine_words$chosen_pic == sine_words$sound2_item,0,1))
subj_list <- read.csv(subject_list, header =  T)
sine_words <- merge(sine_words,subj_list, by = "subject_id")
}
children <- process_sine_data("./Expt2_Words/CHILDREN/","./Expt2_Words/children_subject_list.csv")
children$Group <- "Children"
adults <- process_sine_data("./Expt2_Words/ADULTS/","./Expt2_Words/adult_subject_list.csv")
adults$Group <- "Adults: 1st Lang"
italians <- process_sine_data("./Expt2_Words/ITALIAN/","./Expt2_Words/italian_subject_list.csv")
italians$Group <- "Adults: 2nd Lang"
expt2 <- rbind(children,adults,italians)
summaryBy(resp ~ speaker_match + clarity + distance,data = children)
summaryBy(resp + choose_unmentioned ~ age_years + distance , data =subset(children, instruction_number == 3))
summary(glmer(resp ~  distance*scale(age_years) +(1+distance|subject_id), data = subset(children, instruction_number == 3 & distance != "different"), family = "binomial"))
#######
# Exclude trials where they got a clear word wrong
wrong_clear <- summaryBy(resp ~ subject_id + trial_id, data = subset(children, clarity != "distorted"))
wrong_clear <- subset(wrong_clear, resp.mean <1)
wrong_clear$subj_trial <- paste(wrong_clear$subject_id, wrong_clear$trial_id)
children$subj_trial <- paste(children$subject_id,children$trial_id)
children <- children[!children$subj_trial %in% wrong_clear$subj_trial,]
summaryBy(resp ~ speaker_match + clarity + distance,data = children)
summaryBy(resp + choose_unmentioned ~ age_years + distance , data =subset(children, instruction_number == 3))
summary(expt2$trial_id)
summary(expt2\)
summary(expt2)
unique(expt2$age_years)
expt2$Group2 <- expt2$Group
subset(expt2, age_years %in%c("2","3"))$Group2 <- "Younger Children"
expt2[expt2$age_years %in%c("2","3"),]$Group2 <- "Younger Children"
expt2[expt2$age_years %in%c("4","5"),]$Group2 <- "Older Children"
brm(resp ~ scale(trial_number) + (1+scale(trial_number)||subject_id), data = subset(expt2, Group == "Adults: 2nd Lang" & clarity == "distorted" ), family = "bernoulli", iter = 1000, chains = 4)
library(brms)
brm(resp ~ scale(trial_number) + (1+scale(trial_number)||subject_id), data = subset(expt2, Group == "Adults: 2nd Lang" & clarity == "distorted" ), family = "bernoulli", iter = 1000, chains = 4)
brm(resp ~ scale(trial_number) + (1+scale(trial_number)||subject_id), data = subset(expt2, Group != "Children" & clarity == "distorted" ), family = "bernoulli", iter = 1000, chains = 4)
brm(resp ~ scale(trial_number) + (1+scale(trial_number)||subject_id), data = subset(expt2,  clarity == "distorted" ), family = "bernoulli", iter = 1000, chains = 4)
library(knitr)
library(papeR)
library(formattable)
library(knitr)
library(papeR)
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(cache=TRUE)
knitr::opts_chunk$set(cache.lazy=FALSE)
library(compute.es)
library(cowplot)
library(metafor)
library(skewt)
library(fitdistrplus)
library(gamlss)
library(gamlss.dist)
library(lme4)
library(ez)
library(jsonlite)
library(ggplot2)
library(gridExtra)
library(plyr)
library(dplyr)
library(doBy)
library(sn)
library(bootstrap)
library(brms)
library(tidyr)
# From Mike Frank
theta <- function(x,xdata,na.rm=T) {mean(xdata[x],na.rm=na.rm)}
ci.low <- function(x,na.rm=T) {
quantile(bootstrap(1:length(x),1000,theta,x,na.rm=na.rm)$thetastar,.025,na.rm=na.rm)} #  mean(x,na.rm=na.rm) -
ci.high <- function(x,na.rm=T) {
quantile(bootstrap(1:length(x),1000,theta,x,na.rm=na.rm)$thetastar,.975,na.rm=na.rm) } #- mean(x,na.rm=na.rm)}
library(lubridate)
library(ggplot2)
library(readr)
library(dplyr)
convert_stan_to_dataframe <- function(stan_object){
sum.df <- data.frame(summary(stan_object)$fixed)
sum.df$Diff_from_zero <- ifelse((sum.df$l.95..CI * sum.df$u.95..CI) > 0, "*","-")
return(sum.df)
}
library(rstan)
library(ggplot2)
library(doBy)
library(brms)
rstan_options(auto_write = TRUE)
options(mc.cores = parallel::detectCores())
set.seed(123)
library(lme4)
library(tidyverse)
library(lubridate)
library(ggplot2)
library(readr)
library(dplyr)
library(doBy)
## for bootstrapping 95% confidence intervals -- from Mike Frank https://github.com/langcog/KTE/blob/master/mcf.useful.R
library(bootstrap)
read_TD_data <- function(csv,type){
word <- bind_rows(lapply(csv, read.csv, colClasses = c("num_siblings"="character","birth_order" = "character","subject_id" = "character")))
word$DOT <- lubridate::parse_date_time(word$date_stamp, "%m/%d/%Y")
word$DOB <- lubridate::parse_date_time(word$date_of_birth,c("%Y-%m-%d","%d/%m.%y"))
#word$age_weeks <- difftime(word$DOT,word$DOB,units = "weeks")
#word$age <- as.numeric(floor(word$age_weeks/26)/2)
#word <- subset(word, age > 1 & age <= 9)
#word$age <- ordered(word$age)
word$Experiment = type
word$trial_type <- as.factor(word$trial_type)
#word <- subset(word, trial_type == "critical" )
word$resp <- ifelse(word$accuracy == "true",1,0)
word$speaker_match <- as.factor(ifelse((word$plain == "fem_plain" & word$sws == "fem_sws")|(word$plain == "mal_plain" & word$sws == "mal_sws"),"Speaker Match","Speaker Mismatch"))
return(word)
}
process_sine_data <- function(path,subject_list){
sine_words_csv <- dir(path = path,pattern='*.csv$', recursive = T,full.names = T)
sine_words <- read_TD_data(sine_words_csv,"Sine Words")
sine_words$testing_loc <- as.factor(sine_words$testing_loc)
sine_words<- subset(sine_words,trial_type == "critical")
sine_words <- subset(sine_words, testing_loc != "pilot")
sine_words$clarity <- as.factor(ifelse(sine_words$instruction_number %in% c(1,2),"clear","distorted"))
sine_words$novelty <- as.factor(ifelse(sine_words$distance %in% c("different"),"novel","familiar"))
sine_words$age <- NA
sine_words$lang <- NA
sine_words$choose_unmentioned <- ifelse(sine_words$chosen_pic == sine_words$sound1_item,0,ifelse(sine_words$chosen_pic == sine_words$sound2_item,0,1))
subj_list <- read.csv(subject_list, header =  T)
sine_words <- merge(sine_words,subj_list, by = "subject_id")
}
children <- process_sine_data("./Expt2_Words/CHILDREN/","./Expt2_Words/children_subject_list.csv")
children$Group <- "Children"
adults <- process_sine_data("./Expt2_Words/ADULTS/","./Expt2_Words/adult_subject_list.csv")
adults$Group <- "Adults: 1st Lang"
italians <- process_sine_data("./Expt2_Words/ITALIAN/","./Expt2_Words/italian_subject_list.csv")
italians$Group <- "Adults: 2nd Lang"
expt2 <- rbind(children,adults,italians)
expt2$Group2 <- expt2$Group
expt2[expt2$age_years %in%c("2","3"),]$Group2 <- "Younger Children"
expt2[expt2$age_years %in%c("4","5"),]$Group2 <- "Older Children"
expt2 <- NA
expt2[expt2$age_years %in%c("4","5"),]$Group2 <- "Older Children"
library(lme4)
library(tidyverse)
library(lubridate)
library(ggplot2)
library(readr)
library(dplyr)
library(doBy)
## for bootstrapping 95% confidence intervals -- from Mike Frank https://github.com/langcog/KTE/blob/master/mcf.useful.R
library(bootstrap)
read_TD_data <- function(csv,type){
word <- bind_rows(lapply(csv, read.csv, colClasses = c("num_siblings"="character","birth_order" = "character","subject_id" = "character")))
word$DOT <- lubridate::parse_date_time(word$date_stamp, "%m/%d/%Y")
word$DOB <- lubridate::parse_date_time(word$date_of_birth,c("%Y-%m-%d","%d/%m.%y"))
#word$age_weeks <- difftime(word$DOT,word$DOB,units = "weeks")
#word$age <- as.numeric(floor(word$age_weeks/26)/2)
#word <- subset(word, age > 1 & age <= 9)
#word$age <- ordered(word$age)
word$Experiment = type
word$trial_type <- as.factor(word$trial_type)
#word <- subset(word, trial_type == "critical" )
word$resp <- ifelse(word$accuracy == "true",1,0)
word$speaker_match <- as.factor(ifelse((word$plain == "fem_plain" & word$sws == "fem_sws")|(word$plain == "mal_plain" & word$sws == "mal_sws"),"Speaker Match","Speaker Mismatch"))
return(word)
}
process_sine_data <- function(path,subject_list){
sine_words_csv <- dir(path = path,pattern='*.csv$', recursive = T,full.names = T)
sine_words <- read_TD_data(sine_words_csv,"Sine Words")
sine_words$testing_loc <- as.factor(sine_words$testing_loc)
sine_words<- subset(sine_words,trial_type == "critical")
sine_words <- subset(sine_words, testing_loc != "pilot")
sine_words$clarity <- as.factor(ifelse(sine_words$instruction_number %in% c(1,2),"clear","distorted"))
sine_words$novelty <- as.factor(ifelse(sine_words$distance %in% c("different"),"novel","familiar"))
sine_words$age <- NA
sine_words$lang <- NA
sine_words$choose_unmentioned <- ifelse(sine_words$chosen_pic == sine_words$sound1_item,0,ifelse(sine_words$chosen_pic == sine_words$sound2_item,0,1))
subj_list <- read.csv(subject_list, header =  T)
sine_words <- merge(sine_words,subj_list, by = "subject_id")
}
children <- process_sine_data("./Expt2_Words/CHILDREN/","./Expt2_Words/children_subject_list.csv")
children$Group <- "Children"
adults <- process_sine_data("./Expt2_Words/ADULTS/","./Expt2_Words/adult_subject_list.csv")
adults$Group <- "Adults: 1st Lang"
italians <- process_sine_data("./Expt2_Words/ITALIAN/","./Expt2_Words/italian_subject_list.csv")
italians$Group <- "Adults: 2nd Lang"
expt2 <- rbind(children,adults,italians)
expt2$Group2 <- expt2$Group
expt2[expt2$age_years %in%c("2","3"),]$Group2 <- "Younger Children"
expt2[expt2$age_years %in%c("4","5"),]$Group2 <- "Older Children"
summary(expt2)
#######
# Exclude trials where they got a clear word wrong
wrong_clear <- summaryBy(resp ~ subject_id + trial_id, data = subset(expt2, clarity != "distorted"))
wrong_clear <- subset(wrong_clear, resp.mean <1)
wrong_clear$subj_trial <- paste(wrong_clear$subject_id, wrong_clear$trial_id)
expt2$subj_trial <- paste(expt2$subject_id,expt2$trial_id)
expt2 <- expt2[!expt2$subj_trial %in% wrong_clear$subj_trial,]
library(rstan)
library(rstan)
library(ggplot2)
library(doBy)
library(brms)
rstan_options(auto_write = TRUE)
options(mc.cores = parallel::detectCores())
set.seed(123)
brm(resp ~ scale(trial_number) + (1+scale(trial_number)||subject_id), data = subset(expt2,  clarity == "distorted" ), family = "bernoulli", iter = 1000, chains = 4)
brm(resp ~ scale(trial_number)*Group + (1+scale(trial_number)||subject_id), data = subset(expt2,  clarity == "distorted" ), family = "bernoulli", iter = 1000, chains = 4)
setwd("~/Dropbox/Studies/Child_PsyLx/TopDown/Expt3_Learning")
# Check if this is explained by lexical knowledge
# Import AoA from Wordbank and see if it correlates with accuracy
library(wordbankr)
wordbank_stats <- get_item_data(c("English"),"WS") %>%
filter(definition %in% unique(children$cdi_item))
english_ws_admins <- get_administration_data("English", "WS")
wordbank_items <- get_instrument_data(instrument_language = c("English"),
instrument_form = "WS",
items = unique(wordbank_stats$item_id),
administrations = english_ws_admins)
wordbank_data <- wordbank_items %>%
dplyr::mutate(produces = value == "produces") %>%
dplyr::group_by(age, data_id,num_item_id) %>%
dplyr::summarise(num_produce = sum(produces, na.rm = TRUE)) %>%
dplyr::group_by(age,num_item_id) %>%
dplyr::summarise(mean_num_produce = mean(num_produce, na.rm = TRUE))
wordbank_stats <- merge(wordbank_stats,subset(wordbank_data, age == "24"), by = "num_item_id")
children <- merge(children, wordbank_stats[,c("definition","mean_num_produce")], by.x = "cdi_item",by.y = "definition", all = TRUE)
summary(glmer(acc ~ mean_num_produce + (1+mean_num_produce|subject_id) + (1|item), data = subset(children, clarity == "distorted"), family = "binomial"))
children <- process_sine_data("./Data")
########
# There was a slight error in the original js script, such that a couple of columns got transposed for
# one condition. So, we need to fix that and then adjust the accuracy scores to account for it
children$re_pic1 = children$sound1_item
children$re_pic2 = children$sound2_item
children$re_pic3 = children$sound3_item
children[children$test_lang == "Clear_After" & children$order %in% c("1_2_2_1","2_1_1_1"),]$re_pic1 <- children[children$test_lang == "Clear_After" & children$order %in% c("1_2_2_1","2_1_1_1"),]$sound2_item
children[children$test_lang == "Clear_After" & children$order %in% c("1_2_2_1","2_1_1_1"),]$re_pic2 <- children[children$test_lang == "Clear_After" & children$order %in% c("1_2_2_1","2_1_1_1"),]$sound1_item
children[children$test_lang == "Clear_After" & children$order %in% c("2_1_2_1","1_2_1_1"),]$re_pic2 <- children[children$test_lang == "Clear_After" & children$order %in% c("2_1_2_1","1_2_1_1"),]$sound3_item
children[children$test_lang == "Clear_After" & children$order %in% c("2_1_2_1","1_2_1_1"),]$re_pic3 <- children[children$test_lang == "Clear_After" & children$order %in% c("2_1_2_1","1_2_1_1"),]$sound2_item
children[children$trial_number > 17 & children$test_lang == "Clear_Before" & children$order %in% c("1_2_2_1","2_1_1_1"),]$re_pic1 <- children[children$trial_number > 17 & children$test_lang == "Clear_Before" & children$order %in% c("1_2_2_1","2_1_1_1"),]$sound2_item
children[children$trial_number > 17 & children$test_lang == "Clear_Before" & children$order %in% c("1_2_2_1","2_1_1_1"),]$re_pic2 <- children[children$trial_number > 17 & children$test_lang == "Clear_Before" & children$order %in% c("1_2_2_1","2_1_1_1"),]$sound1_item
children[children$trial_number > 17 & children$test_lang == "Clear_Before" & children$order %in% c("2_1_2_1","1_2_1_1"),]$re_pic2 <- children[children$trial_number > 17 & children$test_lang == "Clear_Before" & children$order %in% c("2_1_2_1","1_2_1_1"),]$sound3_item
children[children$trial_number > 17 & children$test_lang == "Clear_Before" & children$order %in% c("2_1_2_1","1_2_1_1"),]$re_pic3 <- children[children$trial_number > 17 & children$test_lang == "Clear_Before" & children$order %in% c("2_1_2_1","1_2_1_1"),]$sound2_item
children$acc <- NA
children[children$instruction_number == "1",]$acc <- ifelse(children[children$instruction_number == "1",]$chosen_pic == children[children$instruction_number == "1",]$re_pic1,1,0 )
children[children$instruction_number == "2",]$acc <- ifelse(children[children$instruction_number == "2",]$chosen_pic == children[children$instruction_number == "2",]$re_pic2,1,0 )
children[children$instruction_number == "3",]$acc <- ifelse(children[children$instruction_number == "3",]$chosen_pic == children[children$instruction_number == "3",]$re_pic3,1,0 )
# End the script fix
###########################
# Produce an item column, and merge with the item names used in the mcdi (i.e., add american names for)
# querying wordbank
children$item <- children$re_pic1
children[children$instruction_number == "2",]$item <- children[children$instruction_number == "2",]$re_pic2
children[children$instruction_number == "3",]$item <- children[children$instruction_number == "3",]$re_pic3
children <- merge(children, read.csv("tested_words.csv"), by = "item")
children$clarity <- "clear"
children[children$test_lang == "Clear_After",]$clarity <- ifelse(children[children$test_lang == "Clear_After",]$instruction_number %in% c(2,3),"clear","distorted")
children[children$test_lang == "Clear_Before" & children$trial_number <=17,]$clarity <- ifelse(children[children$test_lang == "Clear_Before" & children$trial_number <=17,]$instruction_number %in% c(1,2),"clear","distorted")
children[children$test_lang == "Clear_Before" & children$trial_number >17,]$clarity <- ifelse(children[children$test_lang == "Clear_Before" & children$trial_number >17,]$instruction_number %in% c(2,3),"clear","distorted")
children$clarity <- as.factor(children$clarity)
children$block <- as.factor(ifelse(children$trial_number > 17, "Test","Training"))
children$test_lang <- as.factor(children$test_lang)
# Find out which children didn't complete and exclude them
# We include "extra" participants
num_test_trials <- summaryBy(acc ~ subject_id,
data = subset(children, clarity == "distorted"
& block == "Test"), FUN = length)
# exclude non-completers
noncomplete1 <- subset(num_test_trials, acc.length <8)
noncomplete2 <- setdiff(as.vector(unique(as.factor(children$subject_id))),
as.vector(unique(as.factor(num_test_trials$subject_id))))
# Full set of excluded children based on fussiness etc from Hanna's subject sheet + our noncompleters
exclusion = c("tiY94","hEXBd","e6ael","O27zZ","FRI6o","uiBXd","9sb31","C9Nio",
"UICHK",noncomplete1,noncomplete2)
children <- subset(children, !subject_id %in% exclusion)
summaryBy(acc ~ test_lang + clarity + block, data = children)
#######
# Exclude trials where they got a clear word wrong
wrong_clear <- summaryBy(acc ~ subject_id + trial_id, data = subset(children, clarity != "distorted"))
wrong_clear <- subset(wrong_clear, acc.mean <1)
wrong_clear$subj_trial <- paste(wrong_clear$subject_id, wrong_clear$trial_id)
children$subj_trial <- paste(children$subject_id,children$trial_id)
children <- children[!children$subj_trial %in% wrong_clear$subj_trial,]
setwd("~/Dropbox/Studies/Child_PsyLx/TopDown/Expt3_Learning")
children <- process_sine_data("./Data")
########
# There was a slight error in the original js script, such that a couple of columns got transposed for
# one condition. So, we need to fix that and then adjust the accuracy scores to account for it
children$re_pic1 = children$sound1_item
children$re_pic2 = children$sound2_item
children$re_pic3 = children$sound3_item
children[children$test_lang == "Clear_After" & children$order %in% c("1_2_2_1","2_1_1_1"),]$re_pic1 <- children[children$test_lang == "Clear_After" & children$order %in% c("1_2_2_1","2_1_1_1"),]$sound2_item
children[children$test_lang == "Clear_After" & children$order %in% c("1_2_2_1","2_1_1_1"),]$re_pic2 <- children[children$test_lang == "Clear_After" & children$order %in% c("1_2_2_1","2_1_1_1"),]$sound1_item
children[children$test_lang == "Clear_After" & children$order %in% c("2_1_2_1","1_2_1_1"),]$re_pic2 <- children[children$test_lang == "Clear_After" & children$order %in% c("2_1_2_1","1_2_1_1"),]$sound3_item
children[children$test_lang == "Clear_After" & children$order %in% c("2_1_2_1","1_2_1_1"),]$re_pic3 <- children[children$test_lang == "Clear_After" & children$order %in% c("2_1_2_1","1_2_1_1"),]$sound2_item
children[children$trial_number > 17 & children$test_lang == "Clear_Before" & children$order %in% c("1_2_2_1","2_1_1_1"),]$re_pic1 <- children[children$trial_number > 17 & children$test_lang == "Clear_Before" & children$order %in% c("1_2_2_1","2_1_1_1"),]$sound2_item
children[children$trial_number > 17 & children$test_lang == "Clear_Before" & children$order %in% c("1_2_2_1","2_1_1_1"),]$re_pic2 <- children[children$trial_number > 17 & children$test_lang == "Clear_Before" & children$order %in% c("1_2_2_1","2_1_1_1"),]$sound1_item
children[children$trial_number > 17 & children$test_lang == "Clear_Before" & children$order %in% c("2_1_2_1","1_2_1_1"),]$re_pic2 <- children[children$trial_number > 17 & children$test_lang == "Clear_Before" & children$order %in% c("2_1_2_1","1_2_1_1"),]$sound3_item
children[children$trial_number > 17 & children$test_lang == "Clear_Before" & children$order %in% c("2_1_2_1","1_2_1_1"),]$re_pic3 <- children[children$trial_number > 17 & children$test_lang == "Clear_Before" & children$order %in% c("2_1_2_1","1_2_1_1"),]$sound2_item
children$acc <- NA
children[children$instruction_number == "1",]$acc <- ifelse(children[children$instruction_number == "1",]$chosen_pic == children[children$instruction_number == "1",]$re_pic1,1,0 )
children[children$instruction_number == "2",]$acc <- ifelse(children[children$instruction_number == "2",]$chosen_pic == children[children$instruction_number == "2",]$re_pic2,1,0 )
children[children$instruction_number == "3",]$acc <- ifelse(children[children$instruction_number == "3",]$chosen_pic == children[children$instruction_number == "3",]$re_pic3,1,0 )
# End the script fix
###########################
# Produce an item column, and merge with the item names used in the mcdi (i.e., add american names for)
# querying wordbank
children$item <- children$re_pic1
children[children$instruction_number == "2",]$item <- children[children$instruction_number == "2",]$re_pic2
children[children$instruction_number == "3",]$item <- children[children$instruction_number == "3",]$re_pic3
children <- merge(children, read.csv("tested_words.csv"), by = "item")
children$clarity <- "clear"
children[children$test_lang == "Clear_After",]$clarity <- ifelse(children[children$test_lang == "Clear_After",]$instruction_number %in% c(2,3),"clear","distorted")
children[children$test_lang == "Clear_Before" & children$trial_number <=17,]$clarity <- ifelse(children[children$test_lang == "Clear_Before" & children$trial_number <=17,]$instruction_number %in% c(1,2),"clear","distorted")
children[children$test_lang == "Clear_Before" & children$trial_number >17,]$clarity <- ifelse(children[children$test_lang == "Clear_Before" & children$trial_number >17,]$instruction_number %in% c(2,3),"clear","distorted")
children$clarity <- as.factor(children$clarity)
children$block <- as.factor(ifelse(children$trial_number > 17, "Test","Training"))
children$test_lang <- as.factor(children$test_lang)
# Find out which children didn't complete and exclude them
# We include "extra" participants
num_test_trials <- summaryBy(acc ~ subject_id,
data = subset(children, clarity == "distorted"
& block == "Test"), FUN = length)
# exclude non-completers
noncomplete1 <- subset(num_test_trials, acc.length <8)
noncomplete2 <- setdiff(as.vector(unique(as.factor(children$subject_id))),
as.vector(unique(as.factor(num_test_trials$subject_id))))
# Full set of excluded children based on fussiness etc from Hanna's subject sheet + our noncompleters
exclusion = c("tiY94","hEXBd","e6ael","O27zZ","FRI6o","uiBXd","9sb31","C9Nio",
"UICHK",noncomplete1,noncomplete2)
children <- subset(children, !subject_id %in% exclusion)
summaryBy(acc ~ test_lang + clarity + block, data = children)
#######
# Exclude trials where they got a clear word wrong
wrong_clear <- summaryBy(acc ~ subject_id + trial_id, data = subset(children, clarity != "distorted"))
wrong_clear <- subset(wrong_clear, acc.mean <1)
wrong_clear$subj_trial <- paste(wrong_clear$subject_id, wrong_clear$trial_id)
children$subj_trial <- paste(children$subject_id,children$trial_id)
children <- children[!children$subj_trial %in% wrong_clear$subj_trial,]
